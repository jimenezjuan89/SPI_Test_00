

/**
 * main.c
 */
#include <stdbool.h>
#include "myHeaderFile.h"
#include "buttons.h"
//#include "buttons.c"
#include "interrupt.h"
#include "ssi.h"
#include "gpio.h"
#include "sysctl.h"

#include "MCP23S17_REG.h"

#define SS      (1U<<2)
#define RST     (1U<<1)

#define TX0     (1u<<5)
#define CLK0    (1u<<2)

#define TX2     (1U<<7)
#define CLK2    (1U<<4)


//#define ExpanderAddress     0x40
//#define IODIRA              0x00
//#define IODIRB              0x01
//#define xGPIOA              0x12
//#define xGPIOB              0x13
//#define xOLATA              0x14

void SSI_Init(void);
void SSI_Init_0(void);
void SSI2_Init(void);
void writeSPI(uint8_t data);
void writeSPI_0(uint8_t data);
void IOCON_setup(uint8_t address);
void xPORTA_setup_0(void);
void xPORTA_setup_1(void);
void xPORTA_setup_X(uint8_t address);
void xPORTB_setup(void);
void xGPIOA_out_0(uint8_t value);
void xGPIOA_out_1(uint8_t address, uint8_t value);
void xGPIOB_out(uint8_t value);
void delay(int time);

void PortF_Init(void) {
        SYSCTL->RCGCGPIO = (1<<5);
        SYSCTL->GPIOHBCTL = (1<<5);
        GPIOF_AHB->DIR = 0X0E;
        GPIOF_AHB->DEN = 0X0F;
}

void RST_0(void) {
    GPIOF_AHB->DATA &= ~RST;
    delay(10);
    GPIOF_AHB->DATA |= RST;
    delay(10);
}


 int main(void) {

//    uint8_t data_00 = 0x0A;
//    uint8_t data_01 = 0x05;

    PortF_Init();
    SSI_Init_0();

    RST_0();

 //   IOCON_setup(ADDRESS_01);
//    IOCON_setup(0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8);
    IOCON_setup(ADDRESS_00);
    IOCON_setup(ADDRESS_01);
    IOCON_setup(ADDRESS_02);
    IOCON_setup(ADDRESS_03);
    IOCON_setup(ADDRESS_04);
    IOCON_setup(ADDRESS_05);
    IOCON_setup(ADDRESS_06);
    IOCON_setup(ADDRESS_07);
//    IOCON_setup(1);
//    xPORTA_setup_0();
//    xPORTA_setup_0();
//    xPORTA_setup_1();
    xPORTA_setup_X(ADDRESS_00);
    xPORTA_setup_X(ADDRESS_01);
    xPORTA_setup_X(ADDRESS_02);
    xPORTA_setup_X(ADDRESS_03);
    xPORTA_setup_X(ADDRESS_04);
    xPORTA_setup_X(ADDRESS_05);
    xPORTA_setup_X(ADDRESS_06);
    xPORTA_setup_X(ADDRESS_07);


    delay(100);
//    xPORTB_setup();

    while(1) {
//        xGPIOA_out_0(data_00);
       xGPIOA_out_1(ADDRESS_00, 0x00);
//        xGPIOA_out_1(0x40, 0x00);

       xGPIOA_out_1(ADDRESS_01, 0x01);
//       xGPIOA_out_1(0x42, 0x01);

       xGPIOA_out_1(ADDRESS_02, 0x02);
//       xGPIOA_out_1(0x44, 0x02);

       xGPIOA_out_1(ADDRESS_03, 0x03);
//       xGPIOA_out_1(0x46, 0x03);

       xGPIOA_out_1(ADDRESS_04, 0x04);
//       xGPIOA_out_1(0x48, 0x04);

       xGPIOA_out_1(ADDRESS_05, 0x05);
//       xGPIOA_out_1(0x4A, 0x05);

       xGPIOA_out_1(ADDRESS_06, 0x06);
//       xGPIOA_out_1(0x4C, 0x06);

       xGPIOA_out_1(ADDRESS_07, 0x07);
//       xGPIOA_out_1(0x4E, 0x07);


//       xPORTB_setup();

//        xGPIOA_out_0(0X03);
//        xGPIOB_out(data_01);
        delay(100000);
//        xGPIOA_out_0(data_01);
//        xGPIOA_out_1(ADDRESS_03, 0xFE);
//        xGPIOA_out_1(ADDRESS_02, 0xF0);
         xGPIOA_out_1(ADDRESS_00, 0xFF);
         xGPIOA_out_1(ADDRESS_01, 0x0F);
//         xGPIOA_out_1(0x42, 0x0F);
         xGPIOA_out_1(ADDRESS_02, 0x0F);
//         xGPIOA_out_1(0x46, 0x0F);
         xGPIOA_out_1(ADDRESS_03, 0x0F);
         xGPIOA_out_1(ADDRESS_04, 0x0F);
         xGPIOA_out_1(ADDRESS_05, 0x0F);
         xGPIOA_out_1(ADDRESS_06, 0x0F);
         xGPIOA_out_1(ADDRESS_07, 0x0F);
//         xGPIOA_out_1(0XFF, 0x0F);
//        xGPIOA_out_0(0x0C);
//        xGPIOB_out(data_00);
        delay(100000);
//        xGPIOA_out_1(data_00);
//        xGPIOB_out(data_01);
//        delay(100000);

    }


}

void IOCON_setup(uint8_t address) {


    GPIOF_AHB->DATA &= ~SS;
    delay(10);
    ExpanderAddress |= address;
    writeSPI_0(address);
    writeSPI_0(IOCON_0);
    writeSPI_0(0x08);
    delay(10);
    GPIOF_AHB->DATA |= SS;
}


void xPORTA_setup_0(void) {
    GPIOF_AHB->DATA &= ~SS;
    delay(10);
    writeSPI_0(ADDRESS_01);
    writeSPI_0(IODIRA);
//    writeSPI_0(IO_EXPANDER->IODIRA);
    writeSPI_0(0x00);
    delay(10);
    GPIOF_AHB->DATA |= SS;
}

void xPORTA_setup_1(void) {
    GPIOF_AHB->DATA &= ~SS;
    delay(10);
    writeSPI_0(ADDRESS_04);
    writeSPI_0(IODIRA);
//    writeSPI_0(IO_EXPANDER->IODIRA);
    writeSPI_0(0x00);
    delay(10);
    GPIOF_AHB->DATA |= SS;
}

void xPORTA_setup_X(uint8_t address) {
    GPIOF_AHB->DATA &= ~SS;
    delay(10);
    writeSPI_0(address);
    writeSPI_0(IODIRA);
//    writeSPI_0(IO_EXPANDER->IODIRA);
    writeSPI_0(0x00);
    delay(10);
    GPIOF_AHB->DATA |= SS;
}

void xPORTB_setup(void) {
    GPIOF_AHB->DATA &= ~SS;
    delay(10);
    writeSPI_0(ExpanderAddress_00);
    writeSPI_0(IODIRB);
//    writeSPI_0(IO_EXPANDER->IODIRB);
    writeSPI_0(0x00);
    delay(10);
    GPIOF_AHB->DATA |= SS;
}

void xGPIOA_out_0(uint8_t value) {
        GPIOF_AHB->DATA &= ~SS;
        delay(10);
        writeSPI_0(ExpanderAddress_00);
        writeSPI_0(xOLATA);
//        writeSPI_0(IO_EXPANDER->xGPIOA);
//        writeSPI_0(IO_EXPANDER->OLATA);
        writeSPI_0(value);
        delay(10);
        GPIOF_AHB->DATA |= SS;
}

void xGPIOA_out_1(uint8_t address, uint8_t value) {
//        GPIOF_AHB->DATA &= ~RST;
//        GPIOF_AHB->DATA |= RST;
        GPIOF_AHB->DATA &= ~SS;
        delay(10);
        writeSPI_0(address);
        writeSPI_0(xGPIOA);
        writeSPI_0(value);
        delay(10);
        GPIOF_AHB->DATA |= SS;
}

void xGPIOB_out(uint8_t value) {
        GPIOF_AHB->DATA &= ~SS;
        delay(10);
        writeSPI_0(ExpanderAddress_00);
        writeSPI_0(xGPIOB);
        writeSPI_0(value);
        delay(10);
        GPIOF_AHB->DATA |= SS;
}





//void SSI2_Init(void) {
//    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
//    SYSCTL->RCGCGPIO |= (1<<1);
//    SYSCTL->GPIOHBCTL |= (1<<1);
//        GPIOB_AHB->LOCK = 0X4C4F434B;
//        GPIOB_AHB->DEN = 0X00;
//        GPIOB_AHB->AFSEL |= GPIO_PCTL_PB7_SSI2TX;
//
//    GPIOPinTypeSSI(GPIOB_AHB_BASE, GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_7);
//
//
//    //Enable SSI2 peripheral
//    SysCtlPeripheralEnable(SYSCTL_PERIPH_SSI2);
//    //SysCtlDelay(3);
//
//    //Wait for the DDI2 module to be ready
//    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_SSI2));
//
//    //GPIOPinConfigure(GPIO_PA5_SSI_0_TX);
//
//   // GPIOPinConfigure(GPIO_PCTL_PB7_SSI2TX);
//
//
//    GPIOPinTypeSSI(GPIOB_AHB_BASE, GPIO_PIN_7);
//
//    GPIOPinTypeGPIOOutput(GPIOB_AHB_BASE, GPIO_PIN_7);
//
//    SSIClockSourceSet(SSI2_BASE, SSI_CLOCK_PIOSC);
//
//    //Configure the SSI
//    SSIConfigSetExpClk(SSI2_BASE, SysCtlClockGet(), SSI_FRF_MOTO_MODE_0,
//    SSI_MODE_MASTER, 2000000, 8);
//
//    //Enable the SSI module
//    SSIEnable(SSI2_BASE);
//
//}

void writeSPI_0(uint8_t data) {
    SSI0->DR = data;
    while((SSI0->SR & (1<<0)) == 0);
}

void delay(int time) {
    int counter = 0;
    while(counter < time) {
        counter++;
    }
}


void SSI_Init_0(void) {
//    To enable and initialize the SSI, the following steps are necessary:

//    1. Enable the SSI module using the RCGCSSI register (see page 346).
    //RCGCSSI |= (1 << 3);
        SYSCTL->RCGCSSI = (1<<0);
//    SYSCTL->RCGCSSI = (1<<0);
//    2. Enable the clock to the appropriate GPIO module via the RCGCGPIO register (see page 340).
//    To find out which GPIO port to enable, refer to Table 23-5 on page 1351.
    //RCGCGPIO |= (1 << 1);
      SYSCTL->RCGCGPIO |= (1<<0);
//    SYSCTL->RCGCGPIO = (1<<0);
//    3. Set the GPIO AFSEL bits for the appropriate pins (see page 671). To determine which GPIOs to
//    configure, see Table 23-4 on page 1344.
      GPIOA->AFSEL |= (1<<2) | (1<<3) | (1<<4) | (1<<5);
//    GPIOA->AFSEL |= (1<<2) | (1<<4) | (1<<5);

//    4. Configure the PMCn fields in the GPIOPCTL register to assign the SSI signals to the appropriate
//    pins. See page 688 and Table 23-5 on page 1351.
    GPIOA->PCTL |= (2<<8) | (2<<12) | (2<<16) | (2<<20);
//    GPIOA->PCTL |= (2<<8) | (2<<16) | (2<<24) | (2<<20);

//    5. Program the GPIODEN register to enable the pin's digital function. In addition, the drive strength,
//    drain select and pull-up/pull-down functions must be configured. Refer to “General-Purpose
//    Input/Outputs (GPIOs)” on page 649 for more information.
//    Note: Pull-ups can be used to avoid unnecessary toggles on the SSI pins, which can take the
//    slave to a wrong state. In addition, if the SSIClk signal is programmed to steady state
//    High through the SPO bit in the SSICR0 register, then software must also configure the
//    GPIO port pin corresponding to the SSInClk signal as a pull-up in the GPIO Pull-Up
//    Select (GPIOPUR) register.
    //GPIOA->DEN |=  (TX0 | Clk0);
    GPIOA->DEN |= (TX0 | CLK0);
//        For each of the frame formats, the SSI is configured using the following steps:
//        1. Ensure that the SSE bit in the SSICR1 register is clear before making any configuration changes.
//    SSI2->CR1 &= ~(1<<1);
    SSI0->CR1 &= 0x00;
//        2. Select whether the SSI is a master or slave:
//        a. For master operations, set the SSICR1 register to 0x0000.0000.
//        b. For slave mode (output enabled), set the SSICR1 register to 0x0000.0004.
//        c. For slave mode (output disabled), set the SSICR1 register to 0x0000.000C
    SSI0->CR1 = 0x00;

//    3. Configure the SSI clock source by writing to the SSICC register.
    SSI0->CC = 0x00;

//    4. Configure the clock prescale divisor by writing the SSICPSR register.
    SSI0->CPSR = 10;

//    5. Write the SSICR0 register with the following configuration:
//    - Serial clock rate (SCR)
//    - Desired clock phase/polarity, if using Freescale SPI mode (SPH and SPO)
//    - The protocol mode: Freescale SPI, TI SSF, MICROWIRE (FRF)
//    - The data size (DSS)
    SSI0->CR0 = (0x7 << 0);

//    SSI0->CR0 |= (1U << 7);
//    6. Optionally, configure the SSI module for uDMA use with the following steps:
//    a. Configure a uDMA for SSI use. See “Micro Direct Memory Access (uDMA)” on page 585 for
//    more information.
//    b. Enable the SSI Module's TX FIFO or RX FIFO by setting the TXDMAE or RXDMAE bit in the
//    SSIDMACTL register.

//    7. Enable the SSI by setting the SSE bit in the SSICR1 register.
//    As an example, assume the SSI must be configured to operate with the following parameters:
//    - Master operation
//    - Freescale SPI mode (SPO=1, SPH=1)
//    - 1 Mbps bit rate
//    - 8 data bits

    SSI0->CR1 |= 0X02;
}

